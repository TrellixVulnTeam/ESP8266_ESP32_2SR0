#!/bin/sh

set -e

MVFS_USER="mvfs"
MVFS_UID=499
MVFS_GROUP="daemon"
MVFS_FS="/usr/bin/mvfs"
MVFS_MOUNT_DIR="/var/mvfs"
MVFS_CONFIG_DIR="/tmp/.mvfs"
MVFS_CONFIG="${MVFS_CONFIG_DIR}/mvfs.ini"
MVFS_TAGDB=".mvfs/tagdb"
#MVFS_MNTOPT="-s -o ignore_dbpath"
#MVFS_MNTOPT="-s"
#MVFS_MNTOPT="-s -ono_events"

mvfs_mkdirs()
{
  mkdir -p "${MVFS_CONFIG_DIR}"
  chmod -R 777 "${MVFS_CONFIG_DIR}"
  touch "${MVFS_CONFIG}"
  chmod 666 "${MVFS_CONFIG}"
}

mvfs_adduser()
{
  MVFS_GID=`cat /etc/group | grep ${MVFS_GROUP} | cut -d : -f 3`
  if [ -z "$MVFS_GID" ]
  then
    addgroup "$MVFS_GROUP"
    MVFS_GID=`cat /etc/group | grep ${MVFS_GROUP} | cut -d : -f 3`
    if [ -z "$MVFS_GID" ]
    then
      MVFS_GID=0
    fi
  fi
  if [ "`id -un ${MVFS_USER} 2>/dev/null`" != "${MVFS_USER}" ]
  then
    echo "${MVFS_USER}:*:${MVFS_UID}:${MVFS_GID}::/:/bin/sh" >> /etc/passwd
  fi
}

mvfs_reread()
{
  cat "${MVFS_MOUNT_DIR}/meta/.update"
}

mvfs_add_volume()
{
  alias="$1"
  mountdir="$2"

  if [ ! -z "$alias" -a ! -z "$mountdir" ]
  then
    mvfs_mkdirs
    if [ ! `grep -s "^${alias}:" "$MVFS_CONFIG"` ]
    then
      p=`realpath ${mountdir}`
      if [ ! -z "$3" ]
      then
        db=`realpath "$3"`
      else
        db="${p}/${MVFS_TAGDB}"
      fi
      echo "${alias}:${p}:${db}" >> "$MVFS_CONFIG"
      mvfs_reread
    fi
  fi
}

mvfs_del_volume()
{
  alias="$1"

  if [ ! -z "$alias" -a -f "$MVFS_CONFIG" ]
  then
    if [ `grep "^${alias}:" "$MVFS_CONFIG"` ]
    then
      sed -i "/^${alias}:/d" "$MVFS_CONFIG"
      mvfs_reread
    fi
  fi
}

mvfs_is_mounted()
{
  if test -d "${MVFS_MOUNT_DIR}/meta"
  then
    echo 1
  else
    echo 0
  fi
}

mvfs_umount()
{
  umount "${MVFS_MOUNT_DIR}" 2>/dev/null
}

mvfs_mount()
{
  mvfs_mkdirs
  mvfs_adduser
  chmod 777 "`dirname ${MVFS_MOUNT_DIR}`"
  test -d "${MVFS_MOUNT_DIR}" && rmdir "${MVFS_MOUNT_DIR}"
  su -c "mkdir -p \"${MVFS_MOUNT_DIR}\"" "${MVFS_USER}"
  su -c "${MVFS_FS} ${MVFS_MNTOPT} -o config=${MVFS_CONFIG} \"${MVFS_MOUNT_DIR}\"" "${MVFS_USER}"
}

case "$1" in
  start|mount)
    mvfs_mount
    ;;
  stop|umount)
    mvfs_umount
    ;;
  add_volume)
    mvfs_add_volume "$2" "$3"
    ;;
  remove_volume)
    mvfs_del_volume "$2"
    ;;
  status)
    if test -d "${MVFS_MOUNT_DIR}/meta"
    then
      echo "Active"
      exit 1
    else
      echo "Non-active"
    fi
    ;;
  *)
    echo "Usage: $0 {start|stop|add_volume|remove_volume|status}"
    echo
    echo "  $0 start"
    echo "	Will mount the meta-view filesystem as ${MVFS_MOUNT_DIR}."
    echo "  $0 stop"
    echo "	Will unmount the meta-view filesystem."
    echo "  $0 add_volume <alias> <mount-dir>"
    echo "	Will add the volume that is mounted at <mount-dir> to the"
    echo "	meta-view filesystem.  The meta-data for the volume will"
    echo "	be accessable in ${MVFS_MOUNT_DIR}/meta/<alias>."
    echo "  $0 remove_volume <alias>"
    echo "	Will remove the volume <alias> from meta-view filesystem."
    echo "  $0 status"
    echo "	Will indicate if the meta-view filesystem is mounted.  The"
    echo "	script will return 1 in case the filesystem is mounted, and"
    echo "	in all other cases, it will return 0."
esac

exit 0
