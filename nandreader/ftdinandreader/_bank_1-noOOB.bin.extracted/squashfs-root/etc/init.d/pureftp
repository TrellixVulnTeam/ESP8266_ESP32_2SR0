#!/bin/sh

. /etc/advancedservices.conf

export PURE_PASSWDFILE=$PURE_FTP_ROOTPATH/$PURE_PASSWDFILE_NAME
export PURE_DBFILE=$PURE_FTP_ROOTPATH/$PURE_DBFILE_NAME

DEBUG=0
# Use killall -q (quiet) to prevent messages like "No process killed".
# When debugging, it can be useful to set DEBUG to 1
if [ $DEBUG -eq 1 ]; then
        KILLALL="killall"
else
        KILLALL="killall -q"
fi

case $1 in
    start)
	
	# if the pureFTP av server is on the harddisk we start it there by calling
	# $HDTOOLSDIR/pureftp start
	if test -e /usr/bin/pure-ftpd;
	then
		echo "starting the pureftp-server ..."
		#To check if PURE_FTP_ROOTPATH exists
		if test ! -d $PURE_FTP_ROOTPATH; then
			echo "pureFTP server $PURE_FTP_ROOTPATH directory does not exist, to be created"
			mkdir -p $PURE_FTP_ROOTPATH
		fi
		
		if test -e /usr/bin/addftpvusr;
		then
			pure-ftpd -4 -A -j -lpuredb:/$PURE_DBFILE -l unix &
			echo "the pureftp-server is started"
		else
			if [ -e /usr/bin/pure-authd ] && [ -e /usr/bin/pureftpcl ];
			then
				pure-authd -s /var/run/ftpd.sock -r /usr/bin/pureftpcl &
				pure-ftpd -4 -A -lextauth:/var/run/ftpd.sock -p 21800:21805 &
				echo "the pureftp-server is started"
			fi
		fi
	fi
	
        ;;
        stop)
	#we can not start the script from the harddisk because at the moment it is called it is already unmounted
	#$HDTOOLSDIR/pureftp stop
	#we just kill the server as soon as the user plugs out the harddisk
	#TODO, do this in a nicer way
	if test -e /usr/bin/pure-ftpd; then
		echo "stopping the pureftp-server ... "
		$KILLALL -9 pure-ftpd
		echo "the pureftp-server is stopped"
	fi
	
	if test -e /usr/bin/pure-authd; then
		echo "stopping the pure-authd ..."
		$KILLALL -9 pure-authd
		echo "the pure-authd is stopped"
	fi
        ;;
        *)
                echo "unknown option"

esac
