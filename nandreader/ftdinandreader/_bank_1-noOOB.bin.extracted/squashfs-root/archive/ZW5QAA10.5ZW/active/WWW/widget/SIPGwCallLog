<%
	require "lfs"
	
    cgilua.lp.include("lp/mbus_util.lp")
    cgilua.contentheader ("text", "xml")
    local action = cgilua.POST["Action"]
    local callLogType = cgilua.POST["Filter"]
    if callLogType=="Missed" then
        callLogType = "None"
    end
	
	local function unlock()
	
      lfs.rmdir("/tmp/lockcallLogdir")
    end

    local function lock()
		local i = 0
		while true do
		
			if lfs.mkdir("/tmp/lockcallLogdir") == true then
			break
			end
			
			sleep(1)
			i = i + 1

			if i == 120 then
				trace("SIPGwCallLog: Unable to capture the lock. Other script instance still in progress? Forcing unlock and continuing")
				unlock()
			end
		end
    end
	
	-- try to get a lock
	lock()
	
    local callLogPath = "SIPServer.CallLog.MergedList.Entry"

    if action~="" then
        --judge the device's WIFI method is WPA or WPA2 in the WLAN.
        local ipOfDevice = cgilua.servervariable"REMOTE_ADDR"
        local replyHost, errorHost = mbus.getParameters{path="Hosts.Host", param="Interface", filter="(== IPAddress "..ipOfDevice..")"}
        if replyHost["Hosts.Host"][1]~=nil and replyHost["Hosts.Host"][1].param~=nil then
            local ethPath = replyHost["Hosts.Host"][1].param["Interface"]
            local replyEth, errorEth = mbus.getParameters{path=ethPath, param={"Technology", "Reference"}}
            if replyEth[ethPath][1]~=nil and replyEth[ethPath][1].param~=nil then
                local ethTech = replyEth[ethPath][1].param["Technology"]
                if ethTech=="WLAN" then
                    local referenceWlan = replyEth[ethPath][1].param["Reference"]
                    local wlanPath = tostring(referenceWlan) .. ".Security"
                    local replyWlan, errorWlan = mbus.getParameters{path=wlanPath, param="Mode"}
                    if replyWlan[wlanPath][1]~=nil and replyWlan[wlanPath][1].param~=nil then
                        local wifiMode = replyWlan[wlanPath][1].param["Mode"]
                        if wifiMode=="disabled" or wifiMode=="WEP" then
                            httperror(550, "Insecure connection")
			    unlock()
                            return
                        end
                    end
                end
            end
        end
    end

    local error = mbus.getParameters{path =callLogPath,flags = {"SYNC"}}
    if action == "GetLog" then
        local xmlStart="\<?xml version=\"1.0\" encoding=\"UTF-8\"?\>"
        local xmlStr, caller, called, direction, startTime, duration = "", "", "", "", "", ""
        if callLogType == "All" then
            local callLogPath = "SIPServer.CallLog.MergedList.Entry"
            local reply, error = mbus.getParameters{path=callLogPath, param={"CallingNumber", "CalledNumber","Direction","StartTime","Duration"}}
            for i,v in pairs(reply[callLogPath]) do
                caller = v.param["CallingNumber"]
                called = v.param["CalledNumber"]
                direction = v.param["Direction"]
                startTime = v.param["StartTime"]
                duration = v.param["Duration"]
	        if caller == nil or called == nil or direction == nil or startTime == nil or duration == nil  then
		        break
		    end 
                xmlStr = xmlStr .. "\<Call\>\<CallingPartyNumber\>"..caller.."\</CallingPartyNumber\>".."\<CalledPartyNumber\>"..called.."\</CalledPartyNumber\>".."\<Direction\>"..direction.."\</Direction\>".."\<Start\>"..startTime.."\</Start\>".."\<Duration\>"..duration.."\</Duration\>\<\/Call\>"
            end
        elseif callLogType~="" then
            local reply, error = mbus.getParameters{path=callLogPath, param={"CallingNumber", "CalledNumber","Direction","StartTime","Duration"}}
            for i,v in pairs(reply[callLogPath]) do
                callLogType = cgilua.POST["Filter"]
                if callLogType=="Missed" then
                    callLogType = "None"
                end
                caller = v.param["CallingNumber"]
                called = v.param["CalledNumber"]
                direction = v.param["Direction"]
                startTime = v.param["StartTime"]
                duration = v.param["Duration"]
                if tostring(duration)=="0" and direction=="Incoming" then
                    direction = "None"
                end
                if tostring(direction)==callLogType then
                    if tostring(duration)=="0" and direction=="None" then
                        direction = "Incoming"
                    end
                    xmlStr = xmlStr .. "\<Call\>\<CallingPartyNumber\>"..caller.."\</CallingPartyNumber\>".."\<CalledPartyNumber\>"..called.."\</CalledPartyNumber\>".."\<Direction\>"..direction.."\</Direction\>".."\<Start\>"..startTime.."\</Start\>".."\<Duration\>"..duration.."\</Duration\>\<\/Call\>"
                end
            end
        end
        xmlStr = "\<CallLog\>" .. xmlStr .. "\<\/CallLog\>"
        cgilua.print(xmlStart ..  tostring(xmlStr))
    elseif action == "RemoveLog" then
        local reply, error = mbus.deleteObjects{path=callLogPath, filter="(== Direction " ..callLogType.. ")"}
		unlock()
        return
    end
    unlock()
%>
